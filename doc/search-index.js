var N=null,E="",T="t",U="u",searchIndex={};
var R=["tower_service","Service","tower_layer","tower_discover","result","try_from","borrow","type_id","typeid","borrow_mut","try_into","ServiceList","ServiceStream","Discover","tower_test","Mock `Service` that can be used in tests.","tower_test::mock","send_error","tower_test::mock::error","tower_test::mock::future","formatter","SendResponse","ResponseFuture","poll_ready","tower_load_shed","tower_load_shed::error","tower_load_shed::future","LoadShedLayer","LoadShed","Overloaded","Error types","Future types","to_owned","clone_into","to_string","into_future","tower_buffer","with_executor","Creates a new `Buffer` wrapping `service`.","tower_buffer::error","tower_buffer::future","BufferLayer","ServiceError","SpawnError","string","tower_util","callallunordered","into_inner","Extract the wrapped `Service`.","optional","tower_util::layer","tower_util::error::optional","tower_util::future::optional","identity","servicefn","BoxService","UnsyncBoxService","CallAllUnordered","Identity","Optional","MakeService","ServiceFn","Response","option","future","tower_filter","tower_filter::error","tower_filter::future","FilterLayer","Predicate","tower_timeout","duration","tower_timeout::error","tower_timeout::future","TimeoutLayer","tower_limit","Enforces a limit on the concurrent number of requests the…","Enforces a rate limit on the number of requests the…","ConcurrencyLimitLayer","ConcurrencyLimit","RateLimitLayer","RateLimit","tower_limit::rate","Get a reference to the inner service","Get a mutable reference to the inner service","Consume `self`, returning the inner service","tower_limit::concurrency::future","tower_limit::rate::future","tower_retry","tower_retry::budget","tower_retry::future","RetryLayer","Overdrawn","tower_reconnect","tower_reconnect::future","Reconnect","make_service","tower_balance","tower_balance::load","make_connection","tower_balance::choose","tower_balance::error","tower_balance::future","tower_balance::load::peak_ewma","tower_balance::load::pending_requests","tower_balance::pool","replicas","instrument","weighted","partial_cmp","ordering","Yields the next discovery change set.","PowerOfTwoChoices","InstrumentFuture","WithPeakEwma","WithPendingRequests","Instrument","HasWeight","WithWeighted","RoundRobin","NoInstrument","PendingRequests","PoolDiscoverer","default","tower::buffer","tower::limit::concurrency","tower::limit","tower::limit::rate","tower::load_shed","tower::retry","tower::timeout","servicebuilder","tower::buffer::error","tower::buffer::future","tower::discover","tower::limit::concurrency::future","tower::limit::rate::future","tower::load_shed::error","tower::load_shed::future","tower::retry::budget","tower::retry::future","tower::timeout::error","tower::timeout::future","tower::builder","tower::layer::util","tower::util","bufferlayer","concurrencylimitlayer","concurrencylimit","MakeConnection","ServiceBuilder","ServiceExt","An asynchronous function from `Request` to a `Response`.","Responses given by the service.","Errors produced by the service.","The future response value.","Returns `Ready` when the service is able to process…","Process the request and return the response asynchronously.","A `tower-layer` to wrap services in `LoadShed` middleware.","A `Service` that sheds load when the inner service isn't…","An error returned by `Overload` when the underlying…","Future for the `LoadShed` service.","Creates a new layer.","Wraps a service in `LoadShed` middleware.","Decorates a `Service`, transforming either the request or…","The wrapped service","Wrap the given service with the middleware, returning a…","Buffer requests with a bounded buffer","Adds a buffer in front of an inner service.","An error produced by a `Service` wrapped by a `Buffer`","An error when the buffer's worker closes unexpectedly.","Error produced when spawning the worker fails","Future eventually completed with the response to the…","WorkerExecutor","This trait allows you to use either Tokio's threaded…","Static service discovery based on a predetermined list of…","Dynamic service discovery based on a stream of service…","A change in the service set","servicelist","Provide a uniform set of services able to satisfy a request.","NewService key","Error produced during discovery","A boxed `Service + Send` trait object.","A boxed `Service` trait object.","This is a `futures::Stream` of responses resulting from…","A stream of responses received from the inner service in…","A `Future` consuming a `Service` and request, waiting…","Optionally forwards requests to an inner service.","Future yielding a `Service` once the service is ready to…","Combine two different service types into a single type.","service_fn","Returns a new `ServiceFn` with the given closure.","Create new `CallAll` combinator.","unordered","Return responses as they are ready, regardless of the…","Create new `CallAllUnordered` combinator.","A no-op middleware.","Two middlewares chained together.","Create a new `Identity` value","Create a new `Stack`.","Create a new `OptionService`","Creates new `Service` values.","Responses given by the service","Errors produced by the service","The `Service` value created by this factory","MakeError","Errors produced while building a service.","The future of the `Service` instance.","Returns `Ready` when the factory is able to process create…","Create and return a new service value asynchronously.","Applies a timeout to requests via the supplied inner…","Applies a timeout to requests.","The timeout elapsed.","`Timeout` response future","Create a timeout from a duration","Creates a new Timeout","concurrency","Limit the max number of requests being concurrently…","Future for the `ConcurrencyLimit` service.","Create a new concurrency limit layer.","Create a new concurrency limiter.","Limit the rate at which requests are processed.","A rate of requests per time period.","Future for the `RateLimit` service.","Create new rate limit layer.","Create a new rate.","Create a new rate limiter","Retry requests based on a policy","Configure retrying requests of \"failed\" responses.","A retry \"budget\" for allowing only a certain amount of…","Represents a \"budget\" for retrying requests.","Indicates that it is not currently allowed to \"withdraw\"…","Create a `Budget` that allows for a certain percent of the…","Store a \"deposit\" in the budget, which will be used to…","Check whether there is enough \"balance\" in the budget to…","overdrawn","The `Future` returned by a `Retry` service.","Create a new `RetryLayer` from a retry policy","A \"retry policy\" to classify if a request should be retried.","The `Future` type returned by `Policy::retry()`.","Check the policy if a certain request should be retried.","clone_request","Tries to clone a request before being passed to the inner…","tower_hedge"];
searchIndex["tower"]={"doc":"`fn(Request) -> Future<Response>`","i":[[0,"error",R[124],R[30],N,N],[3,R[42],R[132],R[169],N,N],[3,"Closed",E,R[170],N,N],[3,R[43],E,R[171],N,N],[0,R[64],R[124],R[31],N,N],[3,R[22],R[133],R[172],N,N],[8,R[173],R[124],R[174],N,N],[3,"Buffer",E,R[168],N,N],[3,R[41],E,R[167],N,N],[8,R[13],R[134],R[179],N,N],[16,"Key",E,R[180],0,N],[16,R[1],E,E,0,N],[16,"Error",E,R[181],0,N],[10,"poll",E,R[111],0,[[["self"]],[R[4],["async"]]]],[4,"Change",E,R[177],N,N],[13,"Insert",E,E,1,N],[13,"Remove",E,E,1,N],[3,R[12],E,R[176],N,N],[3,R[11],E,R[175],N,N],[0,R[216],R[126],R[217],N,N],[0,R[64],R[125],R[31],N,N],[3,R[22],R[135],R[218],N,N],[3,R[78],R[125],R[76],N,N],[3,R[79],E,R[76],N,N],[0,"rate",R[126],R[221],N,N],[0,R[64],R[127],R[31],N,N],[3,R[22],R[136],R[223],N,N],[3,R[80],R[127],R[77],N,N],[3,"Rate",E,R[222],N,N],[3,R[81],E,R[77],N,N],[0,"error",R[128],R[30],N,N],[3,R[29],R[137],R[160],N,N],[0,R[64],R[128],R[31],N,N],[3,R[22],R[138],R[161],N,N],[3,R[28],R[128],R[159],N,N],[3,R[27],E,R[158],N,N],[0,"budget",R[129],R[229],N,N],[3,"Budget",R[139],R[230],N,N],[3,R[92],E,R[231],N,N],[0,R[64],R[129],R[31],N,N],[3,R[22],R[140],R[236],N,N],[3,"Retry",R[129],R[228],N,N],[8,"Policy",E,R[238],N,N],[16,"Future",E,R[239],2,N],[10,"retry",E,R[240],2,[[["self"],["req"],[R[4]]],[R[63]]]],[10,R[241],E,R[242],2,[[["self"],["req"]],[R[63]]]],[3,R[91],E,R[227],N,N],[0,"error",R[130],R[30],N,N],[3,"Elapsed",R[141],R[212],N,N],[0,R[64],R[130],R[31],N,N],[3,R[22],R[142],R[213],N,N],[3,"Timeout",R[130],R[211],N,N],[3,R[74],E,R[210],N,N],[8,R[1],"tower",R[152],N,N],[16,R[62],E,R[153],3,N],[16,"Error",E,R[154],3,N],[16,"Future",E,R[155],3,N],[10,R[23],E,R[156],3,[[["self"]],[R[4],["async"]]]],[10,"call",E,R[157],3,N],[5,R[190],E,R[191],N,[[[T]],[R[54]]]],[8,R[149],E,"The MakeConnection trait is used to create transports",N,N],[16,"Connection",E,"The transport provided by this service",4,N],[16,"Error",E,"Errors produced by the connecting service",4,N],[16,"Future",E,"The future that eventually produces the transport",4,N],[10,R[23],E,"Returns `Ready` when it is able to make more connections.",4,[[["self"]],[R[4],["async"]]]],[10,R[99],E,"Connect and return a transport asynchronously",4,N],[8,R[60],E,R[201],N,N],[16,R[62],E,R[202],5,N],[16,"Error",E,R[203],5,N],[16,R[1],E,R[204],5,N],[16,R[205],E,R[206],5,N],[16,"Future",E,R[207],5,N],[10,R[23],E,R[208],5,[[["self"]],[R[4],["async"]]]],[10,R[96],E,R[209],5,N],[0,"builder",E,"Builder types to compose layers and services",N,N],[3,R[150],R[143],"Declaratively construct Service values.",N,N],[11,"new",E,"Create a new `ServiceBuilder`.",6,[[],["self"]]],[11,"layer",E,"Add a new layer `T` into the `ServiceBuilder`.",6,[[["self"],[T]],[R[131],["stack"]]]],[11,"buffer",E,"Buffer requests when when the next layer is out of capacity.",6,[[["self"],["usize"]],[R[131],["stack"]]]],[11,"concurrency_limit",E,"Limit the max number of in-flight requests.",6,[[["self"],["usize"]],[R[131],["stack"]]]],[11,"load_shed",E,"Drop requests when the next layer is unable to respond to…",6,[[["self"]],[R[131],["stack"]]]],[11,"rate_limit",E,"Limit requests to at most `num` per the given duration",6,[[["self"],["u64"],[R[71]]],[R[131],["stack"]]]],[11,"retry",E,"Retry failed requests.",6,[[["self"],["p"]],[R[131],["stack"]]]],[11,"timeout",E,"Fail requests that take longer than `timeout`.",6,[[["self"],[R[71]]],[R[131],["stack"]]]],[11,"service",E,"Wrap the service `S` with the layers.",6,N],[0,"layer","tower","A collection of `Layer` based tower services",N,N],[8,"Layer","tower::layer",R[164],N,N],[16,R[1],E,R[165],7,N],[10,"layer",E,R[166],7,N],[0,"util",E,"`util` exports an Identity Layer and Chain, a mechanism…",N,N],[3,R[58],R[144],R[196],N,N],[3,"Stack",E,R[197],N,N],[0,"util","tower","Combinators for working with `Service`s",N,N],[3,R[55],R[145],R[182],N,N],[3,"CallAll",E,R[184],N,N],[3,R[57],E,R[185],N,N],[4,"Either",E,R[189],N,N],[13,"A",E,E,8,N],[13,"B",E,E,8,N],[3,"Oneshot",E,R[186],N,N],[3,R[59],E,R[187],N,N],[3,"Ready",E,R[188],N,N],[3,R[56],E,R[183],N,N],[8,R[151],E,"An extension trait for `Service`s that provides a variety…",N,N],[11,"ready",E,"A future yielding the service when it is ready to accept a…",9,[[["self"]],["ready"]]],[11,"oneshot",E,"Consume this `Service`, calling with the providing request…",9,[[["self"],["request"]],["oneshot"]]],[11,"call_all",E,"Process all requests from the given `Stream`, and produce…",9,[[["self"],["s"]],["callall"]]],[11,R[34],R[132],E,10,[[["self"]],[R[44]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[5],E,E,10,[[[U]],[R[4]]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,R[9],E,E,10,[[["self"]],[T]]],[11,R[10],E,E,10,[[["self"]],[R[4]]]],[11,R[34],E,E,11,[[["self"]],[R[44]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[5],E,E,11,[[[U]],[R[4]]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,R[9],E,E,11,[[["self"]],[T]]],[11,R[10],E,E,11,[[["self"]],[R[4]]]],[11,R[34],E,E,12,[[["self"]],[R[44]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[5],E,E,12,[[[U]],[R[4]]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[9],E,E,12,[[["self"]],[T]]],[11,R[10],E,E,12,[[["self"]],[R[4]]]],[11,"from",R[133],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[5],E,E,13,[[[U]],[R[4]]]],[11,R[6],E,E,13,[[["self"]],[T]]],[11,R[7],E,E,13,[[["self"]],[R[8]]]],[11,R[9],E,E,13,[[["self"]],[T]]],[11,R[10],E,E,13,[[["self"]],[R[4]]]],[11,R[35],E,E,13,[[["self"]],["f"]]],[11,"from",R[124],E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[32],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,N],[11,R[5],E,E,14,[[[U]],[R[4]]]],[11,R[6],E,E,14,[[["self"]],[T]]],[11,R[7],E,E,14,[[["self"]],[R[8]]]],[11,R[9],E,E,14,[[["self"]],[T]]],[11,R[10],E,E,14,[[["self"]],[R[4]]]],[11,R[23],E,E,14,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,14,N],[11,R[23],E,E,14,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,14,N],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[5],E,E,15,[[[U]],[R[4]]]],[11,R[6],E,E,15,[[["self"]],[T]]],[11,R[7],E,E,15,[[["self"]],[R[8]]]],[11,R[9],E,E,15,[[["self"]],[T]]],[11,R[10],E,E,15,[[["self"]],[R[4]]]],[11,"from",R[134],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[5],E,E,16,[[[U]],[R[4]]]],[11,R[6],E,E,16,[[["self"]],[T]]],[11,R[7],E,E,16,[[["self"]],[R[8]]]],[11,R[9],E,E,16,[[["self"]],[T]]],[11,R[10],E,E,16,[[["self"]],[R[4]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[5],E,E,17,[[[U]],[R[4]]]],[11,R[6],E,E,17,[[["self"]],[T]]],[11,R[7],E,E,17,[[["self"]],[R[8]]]],[11,R[9],E,E,17,[[["self"]],[T]]],[11,R[10],E,E,17,[[["self"]],[R[4]]]],[11,"from",R[135],E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[5],E,E,18,[[[U]],[R[4]]]],[11,R[6],E,E,18,[[["self"]],[T]]],[11,R[7],E,E,18,[[["self"]],[R[8]]]],[11,R[9],E,E,18,[[["self"]],[T]]],[11,R[10],E,E,18,[[["self"]],[R[4]]]],[11,R[35],E,E,18,[[["self"]],["f"]]],[11,"from",R[125],E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[32],E,E,19,[[["self"]],[T]]],[11,R[33],E,E,19,N],[11,R[5],E,E,19,[[[U]],[R[4]]]],[11,R[6],E,E,19,[[["self"]],[T]]],[11,R[7],E,E,19,[[["self"]],[R[8]]]],[11,R[9],E,E,19,[[["self"]],[T]]],[11,R[10],E,E,19,[[["self"]],[R[4]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[32],E,E,20,[[["self"]],[T]]],[11,R[33],E,E,20,N],[11,R[5],E,E,20,[[[U]],[R[4]]]],[11,R[6],E,E,20,[[["self"]],[T]]],[11,R[7],E,E,20,[[["self"]],[R[8]]]],[11,R[9],E,E,20,[[["self"]],[T]]],[11,R[10],E,E,20,[[["self"]],[R[4]]]],[11,R[23],E,E,20,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,20,N],[11,R[23],E,E,20,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,20,N],[11,"from",R[136],E,21,[[[T]],[T]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[5],E,E,21,[[[U]],[R[4]]]],[11,R[6],E,E,21,[[["self"]],[T]]],[11,R[7],E,E,21,[[["self"]],[R[8]]]],[11,R[9],E,E,21,[[["self"]],[T]]],[11,R[10],E,E,21,[[["self"]],[R[4]]]],[11,R[35],E,E,21,[[["self"]],["f"]]],[11,"from",R[127],E,22,[[[T]],[T]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[5],E,E,22,[[[U]],[R[4]]]],[11,R[6],E,E,22,[[["self"]],[T]]],[11,R[7],E,E,22,[[["self"]],[R[8]]]],[11,R[9],E,E,22,[[["self"]],[T]]],[11,R[10],E,E,22,[[["self"]],[R[4]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[32],E,E,23,[[["self"]],[T]]],[11,R[33],E,E,23,N],[11,R[5],E,E,23,[[[U]],[R[4]]]],[11,R[6],E,E,23,[[["self"]],[T]]],[11,R[7],E,E,23,[[["self"]],[R[8]]]],[11,R[9],E,E,23,[[["self"]],[T]]],[11,R[10],E,E,23,[[["self"]],[R[4]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[5],E,E,24,[[[U]],[R[4]]]],[11,R[6],E,E,24,[[["self"]],[T]]],[11,R[7],E,E,24,[[["self"]],[R[8]]]],[11,R[9],E,E,24,[[["self"]],[T]]],[11,R[10],E,E,24,[[["self"]],[R[4]]]],[11,R[23],E,E,24,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,24,N],[11,R[23],E,E,24,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,24,N],[11,R[34],R[137],E,25,[[["self"]],[R[44]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[5],E,E,25,[[[U]],[R[4]]]],[11,R[6],E,E,25,[[["self"]],[T]]],[11,R[7],E,E,25,[[["self"]],[R[8]]]],[11,R[9],E,E,25,[[["self"]],[T]]],[11,R[10],E,E,25,[[["self"]],[R[4]]]],[11,"from",R[138],E,26,[[[T]],[T]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[5],E,E,26,[[[U]],[R[4]]]],[11,R[6],E,E,26,[[["self"]],[T]]],[11,R[7],E,E,26,[[["self"]],[R[8]]]],[11,R[9],E,E,26,[[["self"]],[T]]],[11,R[10],E,E,26,[[["self"]],[R[4]]]],[11,R[35],E,E,26,[[["self"]],["f"]]],[11,"from",R[128],E,27,[[[T]],[T]]],[11,"into",E,E,27,[[["self"]],[U]]],[11,R[32],E,E,27,[[["self"]],[T]]],[11,R[33],E,E,27,N],[11,R[5],E,E,27,[[[U]],[R[4]]]],[11,R[6],E,E,27,[[["self"]],[T]]],[11,R[7],E,E,27,[[["self"]],[R[8]]]],[11,R[9],E,E,27,[[["self"]],[T]]],[11,R[10],E,E,27,[[["self"]],[R[4]]]],[11,R[23],E,E,27,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,27,N],[11,R[23],E,E,27,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,27,N],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[["self"]],[U]]],[11,R[5],E,E,28,[[[U]],[R[4]]]],[11,R[6],E,E,28,[[["self"]],[T]]],[11,R[7],E,E,28,[[["self"]],[R[8]]]],[11,R[9],E,E,28,[[["self"]],[T]]],[11,R[10],E,E,28,[[["self"]],[R[4]]]],[11,"from",R[139],E,29,[[[T]],[T]]],[11,"into",E,E,29,[[["self"]],[U]]],[11,R[5],E,E,29,[[[U]],[R[4]]]],[11,R[6],E,E,29,[[["self"]],[T]]],[11,R[7],E,E,29,[[["self"]],[R[8]]]],[11,R[9],E,E,29,[[["self"]],[T]]],[11,R[10],E,E,29,[[["self"]],[R[4]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[["self"]],[U]]],[11,R[5],E,E,30,[[[U]],[R[4]]]],[11,R[6],E,E,30,[[["self"]],[T]]],[11,R[7],E,E,30,[[["self"]],[R[8]]]],[11,R[9],E,E,30,[[["self"]],[T]]],[11,R[10],E,E,30,[[["self"]],[R[4]]]],[11,"from",R[140],E,31,[[[T]],[T]]],[11,"into",E,E,31,[[["self"]],[U]]],[11,R[5],E,E,31,[[[U]],[R[4]]]],[11,R[6],E,E,31,[[["self"]],[T]]],[11,R[7],E,E,31,[[["self"]],[R[8]]]],[11,R[9],E,E,31,[[["self"]],[T]]],[11,R[10],E,E,31,[[["self"]],[R[4]]]],[11,R[35],E,E,31,[[["self"]],["f"]]],[11,"from",R[129],E,32,[[[T]],[T]]],[11,"into",E,E,32,[[["self"]],[U]]],[11,R[32],E,E,32,[[["self"]],[T]]],[11,R[33],E,E,32,N],[11,R[5],E,E,32,[[[U]],[R[4]]]],[11,R[6],E,E,32,[[["self"]],[T]]],[11,R[7],E,E,32,[[["self"]],[R[8]]]],[11,R[9],E,E,32,[[["self"]],[T]]],[11,R[10],E,E,32,[[["self"]],[R[4]]]],[11,R[23],E,E,32,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,32,N],[11,R[23],E,E,32,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,32,N],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[["self"]],[U]]],[11,R[5],E,E,33,[[[U]],[R[4]]]],[11,R[6],E,E,33,[[["self"]],[T]]],[11,R[7],E,E,33,[[["self"]],[R[8]]]],[11,R[9],E,E,33,[[["self"]],[T]]],[11,R[10],E,E,33,[[["self"]],[R[4]]]],[11,R[34],R[141],E,34,[[["self"]],[R[44]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,"into",E,E,34,[[["self"]],[U]]],[11,R[5],E,E,34,[[[U]],[R[4]]]],[11,R[6],E,E,34,[[["self"]],[T]]],[11,R[7],E,E,34,[[["self"]],[R[8]]]],[11,R[9],E,E,34,[[["self"]],[T]]],[11,R[10],E,E,34,[[["self"]],[R[4]]]],[11,"from",R[142],E,35,[[[T]],[T]]],[11,"into",E,E,35,[[["self"]],[U]]],[11,R[5],E,E,35,[[[U]],[R[4]]]],[11,R[6],E,E,35,[[["self"]],[T]]],[11,R[7],E,E,35,[[["self"]],[R[8]]]],[11,R[9],E,E,35,[[["self"]],[T]]],[11,R[10],E,E,35,[[["self"]],[R[4]]]],[11,R[35],E,E,35,[[["self"]],["f"]]],[11,"from",R[130],E,36,[[[T]],[T]]],[11,"into",E,E,36,[[["self"]],[U]]],[11,R[32],E,E,36,[[["self"]],[T]]],[11,R[33],E,E,36,N],[11,R[5],E,E,36,[[[U]],[R[4]]]],[11,R[6],E,E,36,[[["self"]],[T]]],[11,R[7],E,E,36,[[["self"]],[R[8]]]],[11,R[9],E,E,36,[[["self"]],[T]]],[11,R[10],E,E,36,[[["self"]],[R[4]]]],[11,R[23],E,E,36,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,36,N],[11,R[23],E,E,36,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,36,N],[11,"from",E,E,37,[[[T]],[T]]],[11,"into",E,E,37,[[["self"]],[U]]],[11,R[5],E,E,37,[[[U]],[R[4]]]],[11,R[6],E,E,37,[[["self"]],[T]]],[11,R[7],E,E,37,[[["self"]],[R[8]]]],[11,R[9],E,E,37,[[["self"]],[T]]],[11,R[10],E,E,37,[[["self"]],[R[4]]]],[11,"from",R[143],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,N],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[R[4]]]],[11,"from",R[144],E,38,[[[T]],[T]]],[11,"into",E,E,38,[[["self"]],[U]]],[11,R[32],E,E,38,[[["self"]],[T]]],[11,R[33],E,E,38,N],[11,R[5],E,E,38,[[[U]],[R[4]]]],[11,R[6],E,E,38,[[["self"]],[T]]],[11,R[7],E,E,38,[[["self"]],[R[8]]]],[11,R[9],E,E,38,[[["self"]],[T]]],[11,R[10],E,E,38,[[["self"]],[R[4]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[["self"]],[U]]],[11,R[32],E,E,39,[[["self"]],[T]]],[11,R[33],E,E,39,N],[11,R[5],E,E,39,[[[U]],[R[4]]]],[11,R[6],E,E,39,[[["self"]],[T]]],[11,R[7],E,E,39,[[["self"]],[R[8]]]],[11,R[9],E,E,39,[[["self"]],[T]]],[11,R[10],E,E,39,[[["self"]],[R[4]]]],[11,"from",R[145],E,40,[[[T]],[T]]],[11,"into",E,E,40,[[["self"]],[U]]],[11,R[5],E,E,40,[[[U]],[R[4]]]],[11,R[6],E,E,40,[[["self"]],[T]]],[11,R[7],E,E,40,[[["self"]],[R[8]]]],[11,R[9],E,E,40,[[["self"]],[T]]],[11,R[10],E,E,40,[[["self"]],[R[4]]]],[11,R[23],E,E,40,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,40,N],[11,R[23],E,E,40,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,40,N],[11,"from",E,E,41,[[[T]],[T]]],[11,"into",E,E,41,[[["self"]],[U]]],[11,R[5],E,E,41,[[[U]],[R[4]]]],[11,R[6],E,E,41,[[["self"]],[T]]],[11,R[7],E,E,41,[[["self"]],[R[8]]]],[11,R[9],E,E,41,[[["self"]],[T]]],[11,R[10],E,E,41,[[["self"]],[R[4]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[["self"]],[U]]],[11,R[5],E,E,42,[[[U]],[R[4]]]],[11,R[6],E,E,42,[[["self"]],[T]]],[11,R[7],E,E,42,[[["self"]],[R[8]]]],[11,R[9],E,E,42,[[["self"]],[T]]],[11,R[10],E,E,42,[[["self"]],[R[4]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,N],[11,R[5],E,E,8,[[[U]],[R[4]]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[["self"]],[R[4]]]],[11,R[35],E,E,8,[[["self"]],["f"]]],[11,R[23],E,E,8,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,8,N],[11,R[23],E,E,8,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,8,N],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[["self"]],[U]]],[11,R[5],E,E,43,[[[U]],[R[4]]]],[11,R[6],E,E,43,[[["self"]],[T]]],[11,R[7],E,E,43,[[["self"]],[R[8]]]],[11,R[9],E,E,43,[[["self"]],[T]]],[11,R[10],E,E,43,[[["self"]],[R[4]]]],[11,R[35],E,E,43,[[["self"]],["f"]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[["self"]],[U]]],[11,R[5],E,E,44,[[[U]],[R[4]]]],[11,R[6],E,E,44,[[["self"]],[T]]],[11,R[7],E,E,44,[[["self"]],[R[8]]]],[11,R[9],E,E,44,[[["self"]],[T]]],[11,R[10],E,E,44,[[["self"]],[R[4]]]],[11,R[23],E,E,44,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,44,N],[11,R[23],E,E,44,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,44,N],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[["self"]],[U]]],[11,R[5],E,E,45,[[[U]],[R[4]]]],[11,R[6],E,E,45,[[["self"]],[T]]],[11,R[7],E,E,45,[[["self"]],[R[8]]]],[11,R[9],E,E,45,[[["self"]],[T]]],[11,R[10],E,E,45,[[["self"]],[R[4]]]],[11,R[35],E,E,45,[[["self"]],["f"]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[["self"]],[U]]],[11,R[5],E,E,46,[[[U]],[R[4]]]],[11,R[6],E,E,46,[[["self"]],[T]]],[11,R[7],E,E,46,[[["self"]],[R[8]]]],[11,R[9],E,E,46,[[["self"]],[T]]],[11,R[10],E,E,46,[[["self"]],[R[4]]]],[11,R[23],E,E,46,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,46,N],[11,R[23],E,E,46,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,46,N],[11,"fmt",R[132],E,10,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,11,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,12,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"layer",R[124],E,15,N],[11,"fmt",R[132],E,11,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,10,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,12,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"clone",R[124],E,14,[[["self"]],["buffer"]]],[11,"poll",R[133],E,13,[[["self"]],[R[4],["async"]]]],[11,"source",R[132],E,10,[[["self"]],[R[63],["error"]]]],[11,R[23],R[124],E,14,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,14,N],[11,"poll",R[134],E,17,[[["self"]],[R[4],["async"]]]],[11,"poll",E,E,16,[[["self"]],[R[4],["async"]]]],[11,"drop",R[135],E,18,N],[11,"layer",R[127],E,22,N],[11,"layer",R[125],E,19,N],[11,R[23],R[127],E,24,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,24,N],[11,R[23],R[125],E,20,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,20,N],[11,"fmt",E,E,19,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[127],E,24,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[135],E,18,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[125],E,20,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[136],E,21,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[127],E,23,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,22,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"clone",R[125],E,20,[[["self"]],[R[148]]]],[11,"clone",R[127],E,23,[[["self"]],["rate"]]],[11,"clone",R[125],E,19,[[["self"]],[R[147]]]],[11,"poll",R[136],E,21,[[["self"]],[R[4],["async"]]]],[11,"poll",R[135],E,18,[[["self"]],[R[4],["async"]]]],[11,"fmt",R[137],E,25,[[["self"],[R[20]]],[R[4],["error"]]]],[11,R[23],R[128],E,27,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,27,N],[11,"layer",E,E,28,N],[11,"fmt",E,E,27,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,28,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[137],E,25,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[138],E,26,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"clone",R[128],E,27,[[["self"]],["loadshed"]]],[11,"poll",R[138],E,26,[[["self"]],[R[4],["async"]]]],[11,R[123],R[139],E,29,[[],["budget"]]],[11,R[23],R[129],E,32,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,32,N],[11,"layer",E,E,33,N],[11,"poll",R[140],E,31,[[["self"]],[R[4],["async"]]]],[11,"fmt",R[139],E,30,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[129],E,33,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[140],E,31,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[129],E,32,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[139],E,29,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"clone",R[129],E,32,[[["self"]],["retry"]]],[11,"fmt",R[141],E,34,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"layer",R[130],E,37,N],[11,"fmt",E,E,36,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[141],E,34,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[130],E,37,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[142],E,35,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"clone",R[130],E,36,[[["self"]],["timeout"]]],[11,R[23],E,E,36,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,36,N],[11,"poll",R[142],E,35,[[["self"]],[R[4],["async"]]]],[11,R[23],R[145],E,46,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,46,[[["self"],[T]],["box",[R[64]]]]],[11,R[23],E,E,40,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,40,[[["self"],[T]],["box",[R[64]]]]],[11,R[23],E,E,44,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,44,N],[11,R[23],E,E,8,[[["self"]],[R[4],["async"]]]],[11,"call",E,E,8,N],[11,"poll",E,E,42,[[["self"]],[R[4],["async"]]]],[11,"poll",E,E,41,[[["self"]],[R[4],["async"]]]],[11,"layer",R[144],E,39,N],[11,"layer",E,E,38,N],[11,R[123],E,E,38,[[],[R[53]]]],[11,"fmt",E,E,39,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[145],E,40,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[144],E,38,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",R[145],E,8,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,45,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,42,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,41,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"fmt",E,E,46,[[["self"],[R[20]]],[R[4],["error"]]]],[11,"clone",R[144],E,39,[[["self"]],["stack"]]],[11,"clone",E,E,38,[[["self"]],[R[53]]]],[11,"clone",R[145],E,8,[[["self"]],["either"]]],[11,"poll",E,E,43,[[["self"]],[R[4],["async"]]]],[11,"poll",E,E,45,[[["self"]],[R[4],["async"]]]],[11,"poll",E,E,8,[[["self"]],[R[4],["async"]]]],[11,"clone",R[143],E,6,[[["self"]],[R[131]]]],[11,"fmt",E,E,6,[[["self"],[R[20]]],[R[4]]]],[11,"new",R[124],R[38],14,[[[T],["usize"]],["buffer"]]],[11,R[37],E,R[38],14,[[[T],["usize"],["e"]],["buffer"]]],[11,"new",E,E,15,[[["usize"]],[R[146],["defaultexecutor"]]]],[11,R[37],E,E,15,[[["usize"],["e"]],[R[146]]]],[11,"new",R[134],E,16,[[["s"]],["servicestream"]]],[11,"new",E,E,17,[[[T]],[R[178]]]],[11,"new",R[125],R[219],19,[[["usize"]],[R[147]]]],[11,"new",E,R[220],20,[[[T],["usize"]],[R[148]]]],[11,"get_ref",E,R[83],20,[[["self"]],[T]]],[11,"get_mut",E,R[84],20,[[["self"]],[T]]],[11,R[47],E,R[85],20,[[["self"]],[T]]],[11,"new",R[127],R[224],22,[[["u64"],[R[71]]],["ratelimitlayer"]]],[11,"new",E,R[225],23,[[["u64"],[R[71]]],["rate"]]],[11,"new",E,R[226],24,[[[T],["rate"]],["ratelimit"]]],[11,"get_ref",E,R[83],24,[[["self"]],[T]]],[11,"get_mut",E,R[84],24,[[["self"]],[T]]],[11,R[47],E,R[85],24,[[["self"]],[T]]],[11,"new",R[128],R[163],27,[[["s"]],["loadshed"]]],[11,"new",E,R[162],28,[[],["loadshedlayer"]]],[11,"new",R[139],R[232],29,[[[R[71]],["u32"],["f32"]],["budget"]]],[11,"deposit",E,R[233],29,N],[11,"withdraw",E,R[234],29,[[["self"]],[R[4],[R[235]]]]],[11,"new",R[129],"Retry the inner service depending on this…",32,[[["p"],["s"]],["retry"]]],[11,"new",E,R[237],33,[[["p"]],["retrylayer"]]],[11,"new",R[130],R[215],36,[[[T],[R[71]]],["timeout"]]],[11,"new",E,R[214],37,[[[R[71]]],["timeoutlayer"]]],[11,"new",R[144],R[198],38,[[],[R[53]]]],[11,"new",E,R[199],39,[[["inner"],["outer"]],["stack"]]],[11,"new",R[145],E,40,[[["s"]],["boxservice"]]],[11,"new",E,R[192],41,[[["svc"],["s"]],["callall"]]],[11,R[47],E,R[48],41,[[["self"]],["svc"]]],[11,R[193],E,R[194],41,[[["self"]],[R[46]]]],[11,"new",E,R[195],42,[[["svc"],["s"]],[R[46]]]],[11,R[47],E,R[48],42,[[["self"]],["svc"]]],[11,"new",E,E,43,[[["s"],["req"]],["oneshot"]]],[11,"new",E,R[200],44,[[[R[63]]],[R[49]]]],[11,"new",E,E,45,[[[T]],["ready"]]],[11,"new",E,E,46,[[["s"]],["unsyncboxservice"]]]],"p":[[8,R[13]],[4,"Change"],[8,"Policy"],[8,R[1]],[8,R[149]],[8,R[60]],[3,R[150]],[8,"Layer"],[4,"Either"],[8,R[151]],[3,R[42]],[3,"Closed"],[3,R[43]],[3,R[22]],[3,"Buffer"],[3,R[41]],[3,R[12]],[3,R[11]],[3,R[22]],[3,R[78]],[3,R[79]],[3,R[22]],[3,R[80]],[3,"Rate"],[3,R[81]],[3,R[29]],[3,R[22]],[3,R[28]],[3,R[27]],[3,"Budget"],[3,R[92]],[3,R[22]],[3,"Retry"],[3,R[91]],[3,"Elapsed"],[3,R[22]],[3,"Timeout"],[3,R[74]],[3,R[58]],[3,"Stack"],[3,R[55]],[3,"CallAll"],[3,R[57]],[3,"Oneshot"],[3,R[59]],[3,"Ready"],[3,R[56]]]};
searchIndex[R[243]]={"doc":"Pre-emptively retry requests which have been outstanding…","i":[[3,"Hedge",R[243],"A middleware that pre-emptively retries requests which…",N,N],[3,"Future",E,"The Future returned by the hedge Service.",N,N],[8,"Policy",E,"A policy which describes which requests can be cloned and…",N,N],[10,R[241],E,"clone_request is called when the request is first received…",0,[[["self"],["request"]],[R[63]]]],[10,"can_retry",E,"can_retry is called after the hedge timeout to determine…",0,[[["self"],["request"]],["bool"]]],[11,"new",E,"Create a new hedge middleware.",1,[[["s"],["p"],["u64"],["f32"],[R[71]]],["hedge"]]],[11,"new_with_mock_latencies",E,"A hedge middleware with a prepopulated latency histogram.…",1,N],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,R[35],E,E,2,[[["self"]],["f"]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[4]]]],[11,"poll",E,E,2,[[["self"]],["poll"]]],[11,R[23],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N]],"p":[[8,"Policy"],[3,"Hedge"],[3,"Future"]]};
searchIndex[R[0]]={"doc":"Definition of the core `Service` trait to Tower","i":[[8,R[1],R[0],R[152],N,N],[16,R[62],E,R[153],0,N],[16,"Error",E,R[154],0,N],[16,"Future",E,R[155],0,N],[10,R[23],E,R[156],0,[[["self"]],["poll"]]],[10,"call",E,R[157],0,N]],"p":[[8,R[1]]]};
searchIndex[R[14]]={"doc":R[15],"i":[[0,"mock",R[14],R[15],N,N],[3,"Mock",R[16],"A mock service",N,N],[3,"Handle",E,"Handle to the `Mock`.",N,N],[3,R[21],E,"Send a response in reply to a received request.",N,N],[5,"pair",E,"Create a new `Mock` and `Handle` pair.",N,N],[0,"error",E,R[30],N,N],[3,"Closed",R[18],E,N,N],[0,R[64],R[16],R[31],N,N],[3,R[22],R[19],"Future of the `Mock` response.",N,N],[11,"poll_request",R[16],"Asynchronously gets the next request",0,[[["self"]],["poll",[R[63],"box"]]]],[11,"next_request",E,"Synchronously gets the next request.",0,[[["self"]],[R[63]]]],[11,"allow",E,"Allow a certain number of requests",0,[[["self"],["u64"]]]],[11,R[17],E,"Make the next poll_ method error with the given error.",0,[[["self"],["e"]]]],[11,"send_response",E,E,1,[[["self"],[T]]]],[11,R[17],E,E,1,[[["self"],["e"]]]],[14,"assert_request_eq",R[14],"Asserts that the mock handle receives a new request equal…",N,N],[11,"from",R[16],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,N],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,R[34],R[18],E,3,[[["self"]],[R[44]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,"from",R[19],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[4]]]],[11,R[35],E,E,4,[[["self"]],["f"]]],[11,"clone",R[16],E,2,[[["self"]],["self"]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,E,0,[[["self"]]]],[11,"fmt",R[18],E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[19],E,4,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[16],E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[4]]]],[11,"poll",R[19],E,4,[[["self"]],["poll"]]],[11,R[23],R[16],E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,N]],"p":[[3,"Handle"],[3,R[21]],[3,"Mock"],[3,"Closed"],[3,R[22]]]};
searchIndex[R[24]]={"doc":"Tower middleware for shedding load when inner services…","i":[[3,R[27],R[24],R[158],N,N],[3,R[28],E,R[159],N,N],[0,"error",E,R[30],N,N],[3,R[29],R[25],R[160],N,N],[0,R[64],R[24],R[31],N,N],[3,R[22],R[26],R[161],N,N],[11,"new",R[24],R[162],0,[[],["self"]]],[11,"new",E,R[163],1,[[["s"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,N],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,R[34],R[25],E,2,[[["self"]],[R[44]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,"from",R[26],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,R[35],E,E,3,[[["self"]],["f"]]],[11,"clone",R[24],E,1,[[["self"]],["self"]]],[11,"fmt",R[25],E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[26],E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[24],E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[4]]]],[11,"poll",R[26],E,3,[[["self"]],["poll"]]],[11,R[23],R[24],E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N],[11,"layer",E,E,0,N]],"p":[[3,R[27]],[3,R[28]],[3,R[29]],[3,R[22]]]};
searchIndex[R[2]]={"doc":"Layer traits and extensions.","i":[[8,"Layer",R[2],R[164],N,N],[16,R[1],E,R[165],0,N],[10,"layer",E,R[166],0,N]],"p":[[8,"Layer"]]};
searchIndex[R[36]]={"doc":"Buffer requests when the inner service is out of capacity.","i":[[3,R[41],R[36],R[167],N,N],[3,"Buffer",E,R[168],N,N],[0,"error",E,R[30],N,N],[3,R[42],R[39],R[169],N,N],[3,"Closed",E,R[170],N,N],[3,R[43],E,R[171],N,N],[0,R[64],R[36],R[31],N,N],[3,R[22],R[40],R[172],N,N],[11,"new",R[36],E,0,[[["usize"]],["self"]]],[11,R[37],E,E,0,[[["usize"],["e"]],["self"]]],[11,"new",E,R[38],1,[[[T],["usize"]],["self"]]],[11,R[37],E,R[38],1,[[[T],["usize"],["e"]],["self"]]],[8,R[173],E,R[174],N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,N],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,R[34],R[39],E,2,[[["self"]],[R[44]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,R[34],E,E,3,[[["self"]],[R[44]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,R[34],E,E,4,[[["self"]],[R[44]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[4]]]],[11,"from",R[40],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[R[4]]]],[11,R[35],E,E,5,[[["self"]],["f"]]],[11,"clone",R[36],E,1,[[["self"]],["self"]]],[11,"fmt",R[39],E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[4]]]],[11,"source",E,E,2,[[["self"]],[R[63],["error"]]]],[11,"poll",R[40],E,5,[[["self"]],["poll"]]],[11,"layer",R[36],E,0,N],[11,R[23],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N]],"p":[[3,R[41]],[3,"Buffer"],[3,R[42]],[3,"Closed"],[3,R[43]],[3,R[22]]]};
searchIndex[R[3]]={"doc":"Tower service discovery","i":[[3,R[11],R[3],R[175],N,N],[3,R[12],E,R[176],N,N],[4,"Change",E,R[177],N,N],[13,"Insert",E,E,0,N],[13,"Remove",E,E,0,N],[11,"new",E,E,1,[[[T]],[R[178]]]],[11,"new",E,E,2,[[["s"]],["self"]]],[8,R[13],E,R[179],N,N],[16,"Key",E,R[180],3,N],[16,R[1],E,E,3,N],[16,"Error",E,R[181],3,N],[10,"poll",E,R[111],3,[[["self"]],["poll",["change"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"poll",E,E,1,[[["self"]],["poll",["change"]]]],[11,"poll",E,E,2,[[["self"]],["poll",["change"]]]]],"p":[[4,"Change"],[3,R[11]],[3,R[12]],[8,R[13]]]};
searchIndex[R[45]]={"doc":"Various utility types and functions that are generally…","i":[[3,R[55],R[45],R[182],N,N],[3,R[56],E,R[183],N,N],[3,"CallAll",E,R[184],N,N],[3,R[57],E,R[185],N,N],[3,"Oneshot",E,R[186],N,N],[3,R[59],E,R[187],N,N],[3,"Ready",E,R[188],N,N],[3,R[61],E,"A `Service` implemented by a closure.",N,N],[4,"Either",E,R[189],N,N],[13,"A",E,E,0,N],[13,"B",E,E,0,N],[5,R[190],E,R[191],N,[[[T]],[R[54]]]],[11,"new",E,E,1,[[["s"]],["self"]]],[11,"new",E,E,2,[[["s"]],["self"]]],[11,"new",E,R[192],3,[[["svc"],["s"]],["callall"]]],[11,R[47],E,R[48],3,[[["self"]],["svc"]]],[11,R[193],E,R[194],3,[[["self"]],[R[46]]]],[11,"new",E,R[195],4,[[["svc"],["s"]],[R[46]]]],[11,R[47],E,R[48],4,[[["self"]],["svc"]]],[0,"layer",E,E,N,N],[3,R[58],R[50],R[196],N,N],[3,"Stack",E,R[197],N,N],[11,"new",E,R[198],5,[[],[R[53]]]],[11,"new",E,R[199],6,[[["inner"],["outer"]],["self"]]],[11,"new",R[45],E,7,[[["s"],["req"]],["self"]]],[11,"new",E,R[200],8,[[[R[63]]],[R[49]]]],[11,"new",E,E,9,[[[T]],["self"]]],[0,"error",E,R[30],N,N],[0,R[49],"tower_util::error",E,N,N],[3,"None",R[51],E,N,N],[0,R[64],R[45],R[31],N,N],[0,R[49],"tower_util::future",E,N,N],[3,R[22],R[52],"Response future returned by `Optional`.",N,N],[8,R[60],R[45],R[201],N,N],[16,R[62],E,R[202],10,N],[16,"Error",E,R[203],10,N],[16,R[1],E,R[204],10,N],[16,R[205],E,R[206],10,N],[16,"Future",E,R[207],10,N],[10,R[23],E,R[208],10,[[["self"]],["poll"]]],[10,R[96],E,R[209],10,N],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[4]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[5],E,E,7,[[[U]],[R[4]]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[["self"]],[R[4]]]],[11,R[35],E,E,7,[[["self"]],["f"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[5],E,E,8,[[[U]],[R[4]]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[["self"]],[R[4]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[5],E,E,9,[[[U]],[R[4]]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,R[9],E,E,9,[[["self"]],[T]]],[11,R[10],E,E,9,[[["self"]],[R[4]]]],[11,R[35],E,E,9,[[["self"]],["f"]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,N],[11,R[5],E,E,11,[[[U]],[R[4]]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,R[9],E,E,11,[[["self"]],[T]]],[11,R[10],E,E,11,[[["self"]],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,N],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,R[35],E,E,0,[[["self"]],["f"]]],[11,"from",R[50],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[32],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,N],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[R[4]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,N],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[R[4]]]],[11,R[34],R[51],E,12,[[["self"]],[R[44]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[5],E,E,12,[[[U]],[R[4]]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[9],E,E,12,[[["self"]],[T]]],[11,R[10],E,E,12,[[["self"]],[R[4]]]],[11,"from",R[52],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[5],E,E,13,[[[U]],[R[4]]]],[11,R[6],E,E,13,[[["self"]],[T]]],[11,R[7],E,E,13,[[["self"]],[R[8]]]],[11,R[9],E,E,13,[[["self"]],[T]]],[11,R[10],E,E,13,[[["self"]],[R[4]]]],[11,R[35],E,E,13,[[["self"]],["f"]]],[11,R[123],R[50],E,5,[[],[R[53]]]],[11,"clone",R[45],E,0,[[["self"]],["either"]]],[11,"clone",R[50],E,5,[[["self"]],[R[53]]]],[11,"clone",E,E,6,[[["self"]],["stack"]]],[11,"clone",R[45],E,11,[[["self"]],[R[54]]]],[11,"fmt",R[51],E,12,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[45],E,1,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[50],E,5,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,6,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[51],E,12,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[45],E,9,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,11,[[["self"],[R[20]]],[R[4]]]],[11,"poll",E,E,0,[[["self"]],["poll"]]],[11,"poll",E,E,7,[[["self"]],["poll"]]],[11,"poll",R[52],E,13,[[["self"]],["poll"]]],[11,"poll",R[45],E,9,[[["self"]],["poll"]]],[11,"poll",E,E,3,[[["self"]],["poll",[R[63]]]]],[11,"poll",E,E,4,[[["self"]],["poll",[R[63]]]]],[11,R[23],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[T]],["box",[R[64]]]]],[11,R[23],E,E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],[T]],["box",[R[64]]]]],[11,R[23],E,E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,N],[11,R[23],E,E,8,[[["self"]],["poll"]]],[11,"call",E,E,8,N],[11,R[23],E,E,11,[[["self"]],["poll"]]],[11,"call",E,E,11,N],[11,"layer",R[50],E,5,N],[11,"layer",E,E,6,N]],"p":[[4,"Either"],[3,R[55]],[3,R[56]],[3,"CallAll"],[3,R[57]],[3,R[58]],[3,"Stack"],[3,"Oneshot"],[3,R[59]],[3,"Ready"],[8,R[60]],[3,R[61]],[3,"None"],[3,R[22]]]};
searchIndex[R[65]]={"doc":"Conditionally dispatch requests to the inner service based…","i":[[3,R[68],R[65],E,N,N],[3,"Filter",E,E,N,N],[0,"error",E,R[30],N,N],[3,"Error",R[66],"Error produced by `Filter`",N,N],[11,"rejected",E,"Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner",E,"Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,R[64],R[65],R[31],N,N],[3,R[22],R[67],"Filtered response future",N,N],[11,"new",R[65],E,1,[[[U]],["self"]]],[8,R[69],E,"Checks a request",N,N],[16,"Future",E,E,2,N],[10,"check",E,E,2,N],[11,"new",E,E,3,[[[T],[U]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,N],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,R[34],R[66],E,0,[[["self"]],[R[44]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",R[67],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[4]]]],[11,R[35],E,E,4,[[["self"]],["f"]]],[11,"clone",R[65],E,3,[[["self"]],["filter"]]],[11,"fmt",R[66],E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[67],E,4,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[65],E,3,[[["self"],[R[20]]],[R[4]]]],[11,"source",R[66],E,0,[[["self"]],[R[63],["error"]]]],[11,"poll",R[67],E,4,[[["self"]],["poll"]]],[11,R[23],R[65],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,N],[11,"layer",E,E,1,N]],"p":[[3,"Error"],[3,R[68]],[8,R[69]],[3,"Filter"],[3,R[22]]]};
searchIndex[R[70]]={"doc":"Tower middleware that applies a timeout to requests.","i":[[3,R[74],R[70],R[210],N,N],[3,"Timeout",E,R[211],N,N],[0,"error",E,R[30],N,N],[3,"Elapsed",R[72],R[212],N,N],[0,R[64],R[70],R[31],N,N],[3,R[22],R[73],R[213],N,N],[11,"new",R[70],R[214],0,[[[R[71]]],["self"]]],[11,"new",E,R[215],1,[[[T],[R[71]]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,N],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,R[34],R[72],E,2,[[["self"]],[R[44]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,"from",R[73],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,R[35],E,E,3,[[["self"]],["f"]]],[11,"clone",R[70],E,1,[[["self"]],["timeout"]]],[11,"fmt",R[72],E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[73],E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[70],E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[4]]]],[11,"poll",R[73],E,3,[[["self"]],["poll"]]],[11,"layer",R[70],E,0,N],[11,R[23],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N]],"p":[[3,R[74]],[3,"Timeout"],[3,"Elapsed"],[3,R[22]]]};
searchIndex[R[75]]={"doc":"Tower middleware for limiting requests.","i":[[3,R[79],R[75],R[76],N,N],[3,R[78],E,R[76],N,N],[3,R[81],E,R[77],N,N],[3,R[80],E,R[77],N,N],[0,R[216],E,R[217],N,N],[3,R[78],"tower_limit::concurrency",R[76],N,N],[3,R[79],E,R[76],N,N],[0,R[64],E,R[31],N,N],[3,R[22],R[86],R[218],N,N],[11,"new",R[75],R[219],0,[[["usize"]],["self"]]],[11,"new",E,R[220],1,[[[T],["usize"]],["self"]]],[11,"get_ref",E,R[83],1,[[["self"]],[T]]],[11,"get_mut",E,R[84],1,[[["self"]],[T]]],[11,R[47],E,R[85],1,[[["self"]],[T]]],[0,"rate",E,R[221],N,N],[3,R[80],R[82],R[77],N,N],[3,"Rate",E,R[222],N,N],[3,R[81],E,R[77],N,N],[0,R[64],E,R[31],N,N],[3,R[22],R[87],R[223],N,N],[11,"new",R[75],R[224],2,[[["u64"],[R[71]]],["self"]]],[11,"new",R[82],R[225],3,[[["u64"],[R[71]]],["self"]]],[11,"new",R[75],R[226],4,[[[T],["rate"]],["self"]]],[11,"get_ref",E,R[83],4,[[["self"]],[T]]],[11,"get_mut",E,R[84],4,[[["self"]],[T]]],[11,R[47],E,R[85],4,[[["self"]],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,N],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,N],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,"from",R[86],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[R[4]]]],[11,R[35],E,E,5,[[["self"]],["f"]]],[11,"from",R[82],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,N],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,"from",R[87],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[R[4]]]],[11,R[35],E,E,6,[[["self"]],["f"]]],[11,"clone",R[75],E,0,[[["self"]],[R[147]]]],[11,"clone",E,E,1,[[["self"]],[R[148]]]],[11,"clone",R[82],E,3,[[["self"]],["rate"]]],[11,"drop",R[86],E,5,[[["self"]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[75],E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[87],E,6,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[75],E,2,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[82],E,3,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[75],E,4,[[["self"],[R[20]]],[R[4]]]],[11,"poll",R[86],E,5,[[["self"]],["poll"]]],[11,"poll",R[87],E,6,[[["self"]],["poll"]]],[11,"layer",R[75],E,0,N],[11,"layer",E,E,2,N],[11,R[23],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N],[11,R[23],E,E,4,[[["self"]],["poll"]]],[11,"call",E,E,4,N]],"p":[[3,R[78]],[3,R[79]],[3,R[80]],[3,"Rate"],[3,R[81]],[3,R[22]],[3,R[22]]]};
searchIndex[R[88]]={"doc":"Tower middleware for retrying \"failed\" requests.","i":[[3,R[91],R[88],R[227],N,N],[3,"Retry",E,R[228],N,N],[0,"budget",E,R[229],N,N],[3,"Budget",R[89],R[230],N,N],[3,R[92],E,R[231],N,N],[11,"new",E,R[232],0,[[[R[71]],["u32"],["f32"]],["self"]]],[11,"deposit",E,R[233],0,[[["self"]]]],[11,"withdraw",E,R[234],0,[[["self"]],[R[4],[R[235]]]]],[0,R[64],R[88],R[31],N,N],[3,R[22],R[90],R[236],N,N],[11,"new",R[88],R[237],1,[[["p"]],["self"]]],[8,"Policy",E,R[238],N,N],[16,"Future",E,R[239],2,N],[10,"retry",E,R[240],2,[[["self"],["req"],[R[4]]],[R[63]]]],[10,R[241],E,R[242],2,[[["self"],["req"]],[R[63]]]],[11,"new",E,"Retry the inner service depending on this `Policy`.",3,[[["p"],["s"]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,N],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,"from",R[89],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[4]]]],[11,"from",R[90],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[R[4]]]],[11,R[35],E,E,5,[[["self"]],["f"]]],[11,R[123],R[89],E,0,[[],["budget"]]],[11,"clone",R[88],E,3,[[["self"]],["retry"]]],[11,"fmt",R[89],E,4,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[90],E,5,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[88],E,1,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[4]]]],[11,"poll",R[90],E,5,[[["self"]],["poll"]]],[11,R[23],R[88],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,N],[11,"layer",E,E,1,N]],"p":[[3,"Budget"],[3,R[91]],[8,"Policy"],[3,"Retry"],[3,R[92]],[3,R[22]]]};
searchIndex[R[93]]={"doc":E,"i":[[3,R[95],R[93],E,N,N],[0,R[64],E,E,N,N],[3,R[22],R[94],E,N,N],[11,"new",R[93],E,0,[[["m"],["target"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,R[23],E,E,0,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,0,N],[11,R[23],E,E,0,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,0,N],[11,"from",R[94],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[5],E,E,1,[[[U]],[R[4]]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[4]]]],[11,R[35],E,E,1,[[["self"]],["f"]]],[11,"fmt",R[93],E,0,[[["self"],[R[20]]],[R[4]]]],[11,"poll",R[94],E,1,[[["self"]],["poll"]]],[11,R[23],R[93],E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,N]],"p":[[3,R[95]],[3,R[22]]]};
searchIndex[R[97]]={"doc":E,"i":[[3,"Weight",R[97],"A weight on [0.0, ∞].",N,N],[3,"Weighted",E,"A Service, that implements Load, that",N,N],[3,R[118],E,E,N,N],[3,"Balance",E,"Balances requests across a set of inner services.",N,N],[0,"choose",E,E,N,N],[3,R[112],R[100],"Chooses nodes using the [Power of Two Choices][p2c].",N,N],[3,R[119],E,"Chooses nodes sequentially.",N,N],[3,"TooFew",E,"Indicates that there were not at least two services.",N,N],[3,"Replicas",E,"Holds two or more services.",N,N],[11,"new",E,E,0,[[["smallrng"]],["self"]]],[8,"Choose",E,"A strategy for choosing nodes.",N,N],[10,"choose",E,"Returns the index of a replica to be used next.",1,[[["self"],[R[106]]],["usize"]]],[11,"len",E,E,2,[[["self"]],["usize"]]],[0,"error",R[97],E,N,N],[3,"Balance",R[101],E,N,N],[0,R[64],R[97],E,N,N],[3,R[22],R[102],E,N,N],[0,"load",R[97],E,N,N],[3,"Constant",R[98],"Wraps a type so that `Load::load` returns a constant value.",N,N],[3,R[113],E,"Attaches a `I`-typed instruments to the result of an…",N,N],[3,R[120],E,"A `Instrument` implementation that drops each instrument…",N,N],[11,"new",E,E,3,[[[T],["m"]],["self"]]],[11,"new",E,E,4,[[["i"],["h"],["f"]],["self"]]],[0,"peak_ewma",E,E,N,N],[3,"PeakEwma",R[103],"Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,R[114],E,"Wraps a `D`-typed stream of discovery updates with…",N,N],[3,"Cost",E,"Represents the relative cost of communicating with a…",N,N],[3,"Handle",E,"Updates `RttEstimate` when dropped.",N,N],[11,"new",E,"Wraps a `D`-typed `Discover` so that services have a…",5,[[["d"],[R[71]],[R[71]],["i"]],["self"]]],[0,"pending_requests",R[98],E,N,N],[3,R[121],R[104],"Expresses load based on the number of currently-pending…",N,N],[3,R[115],E,"Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count",E,"Represents the number of currently-pending requests to a…",N,N],[3,"Handle",E,E,N,N],[11,"new",E,E,6,[[["d"],["i"]],["self"]]],[11,"new",R[97],E,7,[[[T],["w"]],["self"]]],[11,"into_parts",E,E,7,N],[18,"MIN",E,E,8,N],[18,"DEFAULT",E,E,8,N],[8,R[116],R[98],"Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output",E,E,9,N],[10,R[107],E,"Attaches an `H`-typed handle to a `V`-typed value.",9,N],[8,"Load",E,"Exposes a load metric.",N,N],[16,"Metric",E,E,10,N],[10,"load",E,E,10,N],[0,"pool",R[97],"This module defines a load-balanced pool of services that…",N,N],[3,R[122],R[105],"A wrapper around `MakeService` that discovers a new…",N,N],[3,"Builder",E,"A [builder] that lets you configure how a [`Pool`]…",N,N],[3,"Pool",E,"A dynamically sized, load-balanced pool of `Service`…",N,N],[11,"new",E,"Create a new builder with default values for all load…",11,[[],["self"]]],[11,"underutilized_below",E,"When the estimated load (see the module-level docs) drops…",11,[[["self"],["f64"]],["self"]]],[11,"loaded_above",E,"When the estimated load (see the module-level docs)…",11,[[["self"],["f64"]],["self"]]],[11,"initial",E,"The initial estimated load average.",11,[[["self"],["f64"]],["self"]]],[11,"urgency",E,"How aggressively the estimated load average is updated.",11,[[["self"],["f64"]],["self"]]],[11,"build",E,"See [`Pool::new`].",11,[[["self"],["ms"],["target"],["c"]],["pool"]]],[11,"new",E,"Construct a new dynamically sized `Pool`.",12,[[["ms"],["target"],["c"]],["self"]]],[8,R[117],R[97],E,N,N],[10,"weight",E,E,13,[[["self"]],["weight"]]],[11,"p2c",E,"Chooses services using the [Power of Two Choices][p2c].",14,[[["d"]],["self"]]],[11,"p2c_with_rng",E,"Initializes a P2C load balancer from the provided…",14,[[["d"],["r"]],[R[4],["error"]]]],[11,"round_robin",E,"Attempts to choose services sequentially.",14,[[["d"]],["self"]]],[11,"new",E,"Creates a new balancer.",14,[[["d"],["c"]],["self"]]],[11,"is_ready",E,"Returns true iff there are ready services.",14,[[["self"]],["bool"]]],[11,"is_not_ready",E,"Returns true iff there are no ready services.",14,[[["self"]],["bool"]]],[11,"num_ready",E,"Counts the number of services considered to be ready.",14,[[["self"]],["usize"]]],[11,"num_not_ready",E,"Counts the number of services not considered to be ready.",14,[[["self"]],["usize"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,N],[11,R[5],E,E,8,[[[U]],[R[4]]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,R[9],E,E,8,[[["self"]],[T]]],[11,R[10],E,E,8,[[["self"]],[R[4]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[32],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,N],[11,R[5],E,E,7,[[[U]],[R[4]]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[9],E,E,7,[[["self"]],[T]]],[11,R[10],E,E,7,[[["self"]],[R[4]]]],[11,R[23],E,E,7,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,7,N],[11,R[23],E,E,7,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,7,N],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[5],E,E,15,[[[U]],[R[4]]]],[11,R[6],E,E,15,[[["self"]],[T]]],[11,R[7],E,E,15,[[["self"]],[R[8]]]],[11,R[9],E,E,15,[[["self"]],[T]]],[11,R[10],E,E,15,[[["self"]],[R[4]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[5],E,E,14,[[[U]],[R[4]]]],[11,R[6],E,E,14,[[["self"]],[T]]],[11,R[7],E,E,14,[[["self"]],[R[8]]]],[11,R[9],E,E,14,[[["self"]],[T]]],[11,R[10],E,E,14,[[["self"]],[R[4]]]],[11,R[23],E,E,14,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,14,N],[11,R[23],E,E,14,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,14,N],[11,"from",R[100],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[5],E,E,0,[[[U]],[R[4]]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[5],E,E,16,[[[U]],[R[4]]]],[11,R[6],E,E,16,[[["self"]],[T]]],[11,R[7],E,E,16,[[["self"]],[R[8]]]],[11,R[9],E,E,16,[[["self"]],[T]]],[11,R[10],E,E,16,[[["self"]],[R[4]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[32],E,E,17,[[["self"]],[T]]],[11,R[33],E,E,17,N],[11,R[5],E,E,17,[[[U]],[R[4]]]],[11,R[6],E,E,17,[[["self"]],[T]]],[11,R[7],E,E,17,[[["self"]],[R[8]]]],[11,R[9],E,E,17,[[["self"]],[T]]],[11,R[10],E,E,17,[[["self"]],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[5],E,E,2,[[[U]],[R[4]]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[4]]]],[11,R[34],R[101],E,18,[[["self"]],[R[44]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[5],E,E,18,[[[U]],[R[4]]]],[11,R[6],E,E,18,[[["self"]],[T]]],[11,R[7],E,E,18,[[["self"]],[R[8]]]],[11,R[9],E,E,18,[[["self"]],[T]]],[11,R[10],E,E,18,[[["self"]],[R[4]]]],[11,"from",R[102],E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[5],E,E,19,[[[U]],[R[4]]]],[11,R[6],E,E,19,[[["self"]],[T]]],[11,R[7],E,E,19,[[["self"]],[R[8]]]],[11,R[9],E,E,19,[[["self"]],[T]]],[11,R[10],E,E,19,[[["self"]],[R[4]]]],[11,R[35],E,E,19,[[["self"]],["f"]]],[11,"from",R[98],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[5],E,E,3,[[[U]],[R[4]]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[4]]]],[11,R[23],E,E,3,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,3,N],[11,R[23],E,E,3,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,3,N],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[5],E,E,4,[[[U]],[R[4]]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[4]]]],[11,R[35],E,E,4,[[["self"]],["f"]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[32],E,E,20,[[["self"]],[T]]],[11,R[33],E,E,20,N],[11,R[5],E,E,20,[[[U]],[R[4]]]],[11,R[6],E,E,20,[[["self"]],[T]]],[11,R[7],E,E,20,[[["self"]],[R[8]]]],[11,R[9],E,E,20,[[["self"]],[T]]],[11,R[10],E,E,20,[[["self"]],[R[4]]]],[11,"from",R[103],E,21,[[[T]],[T]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[5],E,E,21,[[[U]],[R[4]]]],[11,R[6],E,E,21,[[["self"]],[T]]],[11,R[7],E,E,21,[[["self"]],[R[8]]]],[11,R[9],E,E,21,[[["self"]],[T]]],[11,R[10],E,E,21,[[["self"]],[R[4]]]],[11,R[23],E,E,21,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,21,N],[11,R[23],E,E,21,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,21,N],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[5],E,E,5,[[[U]],[R[4]]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[9],E,E,5,[[["self"]],[T]]],[11,R[10],E,E,5,[[["self"]],[R[4]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[32],E,E,22,[[["self"]],[T]]],[11,R[33],E,E,22,N],[11,R[5],E,E,22,[[[U]],[R[4]]]],[11,R[6],E,E,22,[[["self"]],[T]]],[11,R[7],E,E,22,[[["self"]],[R[8]]]],[11,R[9],E,E,22,[[["self"]],[T]]],[11,R[10],E,E,22,[[["self"]],[R[4]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[5],E,E,23,[[[U]],[R[4]]]],[11,R[6],E,E,23,[[["self"]],[T]]],[11,R[7],E,E,23,[[["self"]],[R[8]]]],[11,R[9],E,E,23,[[["self"]],[T]]],[11,R[10],E,E,23,[[["self"]],[R[4]]]],[11,"from",R[104],E,24,[[[T]],[T]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[5],E,E,24,[[[U]],[R[4]]]],[11,R[6],E,E,24,[[["self"]],[T]]],[11,R[7],E,E,24,[[["self"]],[R[8]]]],[11,R[9],E,E,24,[[["self"]],[T]]],[11,R[10],E,E,24,[[["self"]],[R[4]]]],[11,R[23],E,E,24,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,24,N],[11,R[23],E,E,24,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,24,N],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[5],E,E,6,[[[U]],[R[4]]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[9],E,E,6,[[["self"]],[T]]],[11,R[10],E,E,6,[[["self"]],[R[4]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[32],E,E,25,[[["self"]],[T]]],[11,R[33],E,E,25,N],[11,R[5],E,E,25,[[[U]],[R[4]]]],[11,R[6],E,E,25,[[["self"]],[T]]],[11,R[7],E,E,25,[[["self"]],[R[8]]]],[11,R[9],E,E,25,[[["self"]],[T]]],[11,R[10],E,E,25,[[["self"]],[R[4]]]],[11,"equivalent",E,E,25,[[["self"],["k"]],["bool"]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[5],E,E,26,[[[U]],[R[4]]]],[11,R[6],E,E,26,[[["self"]],[T]]],[11,R[7],E,E,26,[[["self"]],[R[8]]]],[11,R[9],E,E,26,[[["self"]],[T]]],[11,R[10],E,E,26,[[["self"]],[R[4]]]],[11,"from",R[105],E,27,[[[T]],[T]]],[11,"into",E,E,27,[[["self"]],[U]]],[11,R[5],E,E,27,[[[U]],[R[4]]]],[11,R[6],E,E,27,[[["self"]],[T]]],[11,R[7],E,E,27,[[["self"]],[R[8]]]],[11,R[9],E,E,27,[[["self"]],[T]]],[11,R[10],E,E,27,[[["self"]],[R[4]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,N],[11,R[5],E,E,11,[[[U]],[R[4]]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,R[9],E,E,11,[[["self"]],[T]]],[11,R[10],E,E,11,[[["self"]],[R[4]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[5],E,E,12,[[[U]],[R[4]]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[9],E,E,12,[[["self"]],[T]]],[11,R[10],E,E,12,[[["self"]],[R[4]]]],[11,R[23],E,E,12,[[["self"]],[R[4],["async"]]]],[11,R[99],E,E,12,N],[11,R[23],E,E,12,[[["self"]],[R[4],["async"]]]],[11,R[96],E,E,12,N],[11,"choose",R[100],"Chooses two distinct nodes at random and compares their…",0,[[["self"],[R[106]]],["usize"]]],[11,"choose",E,E,16,[[["self"],[R[106]]],["usize"]]],[11,R[107],R[98],E,20,[[["self"],["h"],["v"]],["v"]]],[11,"weight",R[103],E,21,[[["self"]],["weight"]]],[11,"weight",R[104],E,24,[[["self"]],["weight"]]],[11,"weight",R[97],E,7,[[["self"]],["weight"]]],[11,"load",R[98],E,3,[[["self"]],["m"]]],[11,"load",R[103],E,21,N],[11,"load",R[104],E,24,[[["self"]],["count"]]],[11,"load",R[97],E,7,N],[11,"eq",R[103],E,22,[[["self"],["cost"]],["bool"]]],[11,"ne",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"eq",R[104],E,25,[[["self"],["count"]],["bool"]]],[11,"ne",E,E,25,[[["self"],["count"]],["bool"]]],[11,"eq",R[97],E,8,[[["self"],["weight"]],["bool"]]],[11,"ne",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[108]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[108]]],["bool"]]],[11,R[123],R[100],E,0,[[],["self"]]],[11,R[123],E,E,16,[[],["roundrobin"]]],[11,R[123],R[104],E,25,[[],["count"]]],[11,R[123],R[97],E,8,[[],["self"]]],[11,R[123],R[105],E,11,[[],["self"]]],[11,"cmp",R[104],E,25,[[["self"],["count"]],[R[110]]]],[11,"clone",R[100],E,17,[[["self"]],["toofew"]]],[11,"clone",R[98],E,20,[[["self"]],["noinstrument"]]],[11,"clone",R[103],E,22,[[["self"]],["cost"]]],[11,"clone",R[104],E,25,[[["self"]],["count"]]],[11,"clone",R[97],E,8,[[["self"]],["weight"]]],[11,"clone",E,E,7,[[["self"]],[R[108]]]],[11,"clone",R[105],E,11,[[["self"]],["builder"]]],[11,"from",R[97],E,7,[[[T]],["self"]]],[11,"from",E,E,15,[[["d"]],["self"]]],[11,"from",E,E,8,[[["f64"]],["self"]]],[11,"drop",R[103],E,23,[[["self"]]]],[11,"into",R[97],E,8,[[["self"]],["f64"]]],[11,R[109],R[103],E,22,[[["self"],["cost"]],[R[63],[R[110]]]]],[11,"lt",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"le",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"gt",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"ge",E,E,22,[[["self"],["cost"]],["bool"]]],[11,R[109],R[104],E,25,[[["self"],["count"]],[R[63],[R[110]]]]],[11,"lt",E,E,25,[[["self"],["count"]],["bool"]]],[11,"le",E,E,25,[[["self"],["count"]],["bool"]]],[11,"gt",E,E,25,[[["self"],["count"]],["bool"]]],[11,"ge",E,E,25,[[["self"],["count"]],["bool"]]],[11,R[109],R[97],E,8,[[["self"],["weight"]],[R[63],[R[110]]]]],[11,"lt",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"le",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"gt",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"ge",E,E,8,[[["self"],["weight"]],["bool"]]],[11,R[109],E,E,7,[[["self"],[R[108]]],[R[63],[R[110]]]]],[11,"lt",E,E,7,[[["self"],[R[108]]],["bool"]]],[11,"le",E,E,7,[[["self"],[R[108]]],["bool"]]],[11,"gt",E,E,7,[[["self"],[R[108]]],["bool"]]],[11,"ge",E,E,7,[[["self"],[R[108]]],["bool"]]],[11,"fmt",R[101],E,18,[[["self"],[R[20]]],[R[4]]]],[11,"div",R[103],E,22,[[["self"],["weight"]],["f64"]]],[11,"div",R[104],E,25,[[["self"],["weight"]],["f64"]]],[11,"index",R[100],E,2,N],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,16,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,17,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[101],E,18,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[98],E,20,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[103],E,22,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[104],E,24,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,6,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,25,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,26,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[97],E,8,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,7,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",E,E,15,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[105],E,11,[[["self"],[R[20]]],[R[4]]]],[11,"fmt",R[97],E,14,[[["self"],[R[20]]],[R[4]]]],[11,"source",R[101],E,18,[[["self"]],[R[63],["error"]]]],[11,"poll",R[102],E,19,[[["self"]],["poll"]]],[11,"poll",R[98],E,4,[[["self"]],["poll"]]],[11,"poll",E,R[111],3,[[["self"]],["poll",["change"]]]],[11,"poll",R[103],E,5,[[["self"]],["poll",["change"]]]],[11,"poll",R[104],R[111],6,[[["self"]],["poll",["change"]]]],[11,"poll",R[97],E,15,[[["self"]],["poll",["change"]]]],[11,"poll",R[105],E,27,[[["self"]],["poll",["change"]]]],[11,R[23],R[98],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,N],[11,R[23],R[103],E,21,[[["self"]],["poll"]]],[11,"call",E,E,21,N],[11,R[23],R[104],E,24,[[["self"]],["poll"]]],[11,"call",E,E,24,N],[11,R[23],R[97],E,7,[[["self"]],["poll"]]],[11,"call",E,E,7,N],[11,R[23],R[105],E,12,[[["self"]],["poll"]]],[11,"call",E,E,12,N],[11,R[23],R[97],"Prepares the balancer to process a request.",14,[[["self"]],["poll"]]],[11,"call",E,E,14,N]],"p":[[3,R[112]],[8,"Choose"],[3,"Replicas"],[3,"Constant"],[3,R[113]],[3,R[114]],[3,R[115]],[3,"Weighted"],[3,"Weight"],[8,R[116]],[8,"Load"],[3,"Builder"],[3,"Pool"],[8,R[117]],[3,"Balance"],[3,R[118]],[3,R[119]],[3,"TooFew"],[3,"Balance"],[3,R[22]],[3,R[120]],[3,"PeakEwma"],[3,"Cost"],[3,"Handle"],[3,R[121]],[3,"Count"],[3,"Handle"],[3,R[122]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);